#! /usr/bin/env perl

use 5.006001;
use strict;
use warnings;
sub usage();

use Getopt::Std qw( getopts );

my %opts;

getopts("ht:p:d", \%opts) or die usage();

if ($opts{h}) {
	print usage();
	exit;
}

my $stap_args = $opts{a} || '';

my $port = $opts{p} or die "No Port Specified by the -p option\n";

if ($port !~ /^\d+$/) {
	die "Bad -p options value \"$port\": not look like a port"
}

my $time = $opts{t} || 5000;

if ($time !~ /^\d+$/) {
	die "Bad -t options value \"$time\": not look like time"
}

my $preamble = <<_EOC_;
probe begin {
    printf("Collecting tcp dport ($port)...syn-ack time\\n\\n")
}
_EOC_
chop $preamble;

my $stap_src = <<_EOC_;
$preamble

global trace, intervals

probe tcp.ipv4.receive {
	if (dport == $port) {
		if (syn) {
			t = gettimeofday_us()
			trace[saddr, daddr, dport, sport] =  t
		}

		if (ack) {
			begin = trace[saddr, daddr, dport, sport]
			now = gettimeofday_us()
			if (begin) {
				intervals <<< 	now - begin
			}
			delete trace[saddr, daddr, dport, sport]
		}
	}
}

probe timer.ms($time) {
	if (\@count(intervals) > 0) {
		printf("interval min:%dus, max:%dus avg:%dus, cnt:%d\\r\\n",
				\@min(intervals), \@max(intervals), \@avg(intervals), \@count(intervals)
		      )
		print(\@hist_log(intervals))
	} else {
		printf("none\\r\\n")
	}
	exit()
}
_EOC_

if ($opts{d}) {
	print $stap_src;
	exit;
}

open my $in, "|stap --skip-badvars $stap_args -"
    or die "Cannot run stap: $!\n";

print $in $stap_src;

close $in;


sub usage() {
    return <<'_EOC_';
Usage:
    tcp-syn-ack-time [optoins]
Options:
    -a <args>           Pass extra arguments to the stap utility.
    -t <time>(ms)       Time(ms) to execute.
    -d                  Dump out the systemtap script source.
    -h                  Print this usage.
    -p <port>           Specify the tcp dport.
Examples:
    tcp-syn-ack-time -p 80 -t 5000
_EOC_
}
